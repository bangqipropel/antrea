/*
Copyright 2021 Antrea Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package multicluster

import (
	"context"
	"errors"

	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/klog/v2"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/predicate"

	mcsv1alpha1 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha1"
	"antrea.io/antrea/multicluster/controllers/multicluster/common"
	"antrea.io/antrea/multicluster/controllers/multicluster/internal"
)

// ServiceReconciler reconciles a Service object
type ServiceReconciler struct {
	client.Client
	Scheme               *runtime.Scheme
	remoteClusterManager *internal.RemoteClusterManager
}

func NewServiceReconciler(
	Client client.Client,
	Scheme *runtime.Scheme,
	remoteClusterManager *internal.RemoteClusterManager) *ServiceReconciler {
	reconciler := &ServiceReconciler{
		Client:               Client,
		Scheme:               Scheme,
		remoteClusterManager: remoteClusterManager,
	}
	return reconciler
}

// Service Reconcile will clean up MCS Service if no corresponding ResourceImport in leader cluster
func (r *ServiceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	klog.V(2).InfoS("reconciling Service", "service", req.NamespacedName)
	if *r.remoteClusterManager == nil {
		return ctrl.Result{}, errors.New("clusterset has not been initialized properly, no remote cluster manager")
	}

	remoteCluster, err := getRemoteCluster(r.remoteClusterManager)
	if err != nil {
		return ctrl.Result{}, err
	}

	svc := &corev1.Service{}
	if err := r.Get(ctx, req.NamespacedName, svc); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	leaderNamespace = remoteCluster.GetNamespace()
	if name, ok := svc.Labels[common.SourceImportLabel]; ok {
		resImp := &mcsv1alpha1.ResourceImport{}
		resImpNamespaced := types.NamespacedName{Namespace: leaderNamespace, Name: name}
		if err := remoteCluster.Get(ctx, resImpNamespaced, resImp); err != nil {
			if apierrors.IsNotFound(err) {
				err = r.Delete(ctx, svc, &client.DeleteOptions{})
				if err == nil {
					klog.InfoS("Service is removed because no corresponding ResourceImport anymore", "service", klog.KObj(svc), "resourceimport", resImpNamespaced.String())
					return ctrl.Result{}, nil
				}
			}
			return ctrl.Result{}, err
		}
	}
	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
// Watch the Service with label `antrea.io/multi-cluster-autogenerated` only
func (r *ServiceReconciler) SetupWithManager(mgr ctrl.Manager) error {
	instance, _ := predicate.LabelSelectorPredicate(metav1.LabelSelector{
		MatchLabels: map[string]string{
			common.AntreaMcsAutoGenLabel: "true",
		},
	})
	return ctrl.NewControllerManagedBy(mgr).
		For(&corev1.Service{}).WithEventFilter(instance).
		WithOptions(controller.Options{
			MaxConcurrentReconciles: common.DefaultWorkerCount,
		}).
		Complete(r)
}
